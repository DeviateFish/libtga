{"version":3,"sources":["../src/_intro.js","../src/main.js","../src/_outro.js"],"names":[],"mappings":"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","file":"libtga.js","sourcesContent":["(function(root, undefined) {\n\n  \"use strict\";\n","/* libtga main */\n\nvar XMLHttpRequest = root.XMLHttpRequest || null;\n\n// constants and such:\nvar HEADER_SIZE = 18,\n\n  // image types: is bitfield-ish\n  IMAGE_TYPE_NONE = 0|0,\n  IMAGE_TYPE_COLORMAPPED = 1|0,\n  IMAGE_TYPE_TRUECOLOR = 2|0,\n  IMAGE_TYPE_GREYSCALE = 3|0,\n\n  // compression flag:\n  IMAGE_RUNLENGTH_ENCODED = 0x8|0,\n\n  // color maps (documented on wikipedia, but not in the spec?):\n  /*COLOR_MAP_NONE = 0|0,\n  COLOR_MAP_EXISTS = 1|0,\n  COLOR_MAP_TRUEVISION_START = 2|0,\n  COLOR_MAP_TRUEVISION_END = 127|0,\n  COLOR_MAP_DEV_START = 128|0,\n  COLOR_MAP_DEV_END = 255|0,*/\n\n  // image descriptor constants:\n  IMAGE_DESCRIPTOR_ATTRIBUTE_MASK = 0xf,\n  IMAGE_DESCRIPTOR_ORIGIN_MASK = 0x30,\n  IMAGE_DESCRIPTOR_INTERLEAVE_MASK = 0xc0,\n\n  // Origin values:\n  IMAGE_ORIGIN_VERTICAL_MASK = 0x02,\n  IMAGE_ORIGIN_HORIZONTAL_MASK = 0x01,\n  IMAGE_ORIGIN_TOP = 0x02,\n  IMAGE_ORIGIN_RIGHT = 0x01;\n\nvar TGA = function(arraybuf)\n{\n  this.dataview = new DataView(arraybuf);\n  this.header = TGA.readHeader(this.dataview);\n  this.width = this.header.imageSpec.width;\n  this.height = this.header.imageSpec.height;\n  this.compressed = !!(this.header.imageType & IMAGE_RUNLENGTH_ENCODED);\n  this.imageId = TGA.readImageId(this.dataview, this.header);\n  this.colorMap = TGA.readColorMap(this.dataview, this.header);\n  this.imageData = TGA.readImage(this);\n};\n\n// add constant refs here:\nTGA.HEADER_SIZE = HEADER_SIZE;\nTGA.IMAGE_TYPE_NONE = IMAGE_TYPE_NONE;\nTGA.IMAGE_TYPE_COLORMAPPED = IMAGE_TYPE_COLORMAPPED;\nTGA.IMAGE_TYPE_TRUECOLOR = IMAGE_TYPE_TRUECOLOR;\nTGA.IMAGE_TYPE_GREYSCALE = IMAGE_TYPE_GREYSCALE;\nTGA.IMAGE_RUNLENGTH_ENCODED = IMAGE_RUNLENGTH_ENCODED;\n\n// Utility functions don't really need to be in the prototype?\n// Utility functions:\nTGA.readHeader = function(dataview)\n{\n  var header = {\n    idLength: dataview.getUint8(0, true),\n    mapType: dataview.getUint8(1, true),\n    imageType: dataview.getUint8(2, true),\n    colorMapSpec: TGA.readColorMapSpec(dataview, 3),\n    imageSpec: TGA.readImageSpec(dataview, 8)\n  };\n  return header;\n};\n\nTGA.readColorMapSpec = function(dataview, offset)\n{\n  var bits = dataview.getUint8(offset+4, true);\n  var colorMapSpec = {\n    firstEntry: dataview.getUint16(offset, true),\n    length: dataview.getUint16(offset+2, true),\n    entrySizeBits: bits,\n    entrySizeBytes: Math.floor((bits + 7) / 8)\n  };\n  return colorMapSpec;\n};\n\nTGA.readImageSpec = function(dataview, offset)\n{\n  var descriptor = dataview.getUint8(offset+9);\n  var imageSpec = {\n    xOrigin: dataview.getUint16(offset, true),\n    yOrigin: dataview.getUint16(offset+2, true),\n    width: dataview.getUint16(offset+4, true),\n    height: dataview.getUint16(offset+6, true),\n    pixelDepth: dataview.getUint8(offset+8),\n    descriptor: descriptor,\n    attributeBits: descriptor & IMAGE_DESCRIPTOR_ATTRIBUTE_MASK,\n    origin: (descriptor & IMAGE_DESCRIPTOR_ORIGIN_MASK) >> 4,\n    interleave: (descriptor & IMAGE_DESCRIPTOR_INTERLEAVE_MASK) >> 6\n  };\n  return imageSpec;\n};\n\nTGA.readImageId = function(dataview, header)\n{\n  return new Uint8Array(dataview.buffer, HEADER_SIZE, header.idLength);\n};\n\nTGA.readColorMap = function(dataview, header)\n{\n  if(header.colorMapSpec.length <= 0)\n  {\n    return null;\n  }\n  var colorMap = new Uint8ClampedArray(header.colorMapSpec.length * 4),\n    read = null,\n    offset = HEADER_SIZE + header.idLength;\n\n  switch(header.colorMapSpec.entrySizeBits) {\n    case 8:\n      read = TGA.readPixel8;\n      break;\n    case 16:\n      read = TGA.readPixel15;\n      break;\n    case 15:\n      read = TGA.readPixel16;\n      break;\n    case 24:\n      read = TGA.readPixel24;\n      break;\n    case 32:\n      read = TGA.readPixel32;\n      break;\n    default:\n      throw 'Unsupported pixel depth';\n  }\n\n  for(var i = 0; i < header.colorMapSpec.length; i++)\n  {\n    read(dataview, offset, i, colorMap, i);\n  }\n\n  return colorMap;\n};\n\nTGA.readPixel8 = function(input, offset, i, output, j)\n{\n  var byte = input.getUint8(offset + i);\n  output[j * 4 + 2] = byte; // blue\n  output[j * 4 + 1] = byte; // green\n  output[j * 4 + 0] = byte; // red\n  output[j * 4 + 3] = 255; // alpha\n};\n\nTGA.readPixel15 = function(input, offset, i, output, j)\n{\n  var chunk = input.getUint16(offset + (i * 2), true);\n  output[j * 4 + 2] = (chunk & 0x1f) << 3; // blue\n  output[j * 4 + 1] = ((chunk >> 5) & 0x1f) << 3; // green\n  output[j * 4 + 0] = ((chunk >> 10) & 0x1f) << 3; // red\n  output[j * 4 + 3] = 255; // alpha\n};\n\nTGA.readPixel16 = function(input, offset, i, output, j)\n{\n  var chunk = input.getUint16(offset + (i * 2), true);\n  output[j * 4 + 2] = (chunk & 0x1f) << 3; // blue\n  output[j * 4 + 1] = ((chunk >> 5) & 0x1f) << 3; // green\n  output[j * 4 + 0] = ((chunk >> 10) & 0x1f) << 3; // red\n  output[j * 4 + 3] = (chunk & 0x80) == 0x80 ? 255 : 0; // alpha\n};\n\nTGA.readPixel24 = function(input, offset, i, output, j)\n{\n  output[j * 4 + 2] = input.getUint8(offset + (i * 3) + 0); //blue\n  output[j * 4 + 1] = input.getUint8(offset + (i * 3) + 1); //green\n  output[j * 4 + 0] = input.getUint8(offset + (i * 3) + 2); //red\n  output[j * 4 + 3] = 255;\n};\n\nTGA.readPixel32 = function(input, offset, i, output, j)\n{\n  output[j * 4 + 2] = input.getUint8(offset + (i * 4) + 0); //blue\n  output[j * 4 + 1] = input.getUint8(offset + (i * 4) + 1); //green\n  output[j * 4 + 0] = input.getUint8(offset + (i * 4) + 2); //red\n  output[j * 4 + 3] = 255;//input.getUint8(offset + (i * 4) + 3); // alpha\n};\n\nTGA.readMappedPixel8 = function(input, map, mapOffset, offset, i, output, j)\n{\n  var index = input.getUint8(offset + i) + mapOffset;\n  output[j * 4 + 0] = map[index * 4 + 0]; // blue\n  output[j * 4 + 1] = map[index * 4 + 1]; // green\n  output[j * 4 + 2] = map[index * 4 + 2]; // red\n  output[j * 4 + 3] = map[index * 4 + 3]; // alpha\n};\n\n// not sure these need to be separate functions...\nTGA.readMappedPixel15 = function(input, map, mapOffset, offset, i, output, j)\n{\n  var index = input.getUint16(offset + (i * 2), true) + mapOffset;\n  output[j * 4 + 0] = map[index * 4 + 0]; // blue\n  output[j * 4 + 1] = map[index * 4 + 1]; // green\n  output[j * 4 + 2] = map[index * 4 + 2]; // red\n  output[j * 4 + 3] = map[index * 4 + 3]; // alpha\n};\n\nTGA.readMappedPixel16 = function(input, map, mapOffset, offset, i, output, j)\n{\n  var index = input.getUint16(offset + (i * 2), true) + mapOffset;\n  output[j * 4 + 0] = map[index * 4 + 0]; // blue\n  output[j * 4 + 1] = map[index * 4 + 1]; // green\n  output[j * 4 + 2] = map[index * 4 + 2]; // red\n  output[j * 4 + 3] = map[index * 4 + 3]; // alpha\n};\n\n// is this even valid?\nTGA.readMappedPixel24 = function(input, map, mapOffset, offset, i, output, j)\n{\n  var index = input.getUint16(offset + (i * 2), true) + mapOffset; // uhhhhh\n  output[j * 4 + 0] = map[index * 4 + 0]; // blue\n  output[j * 4 + 1] = map[index * 4 + 1]; // green\n  output[j * 4 + 2] = map[index * 4 + 2]; // red\n  output[j * 4 + 3] = map[index * 4 + 3]; // alpha\n};\n\n// is this even valid, either?\nTGA.readMappedPixel32 = function(input, map, mapOffset, offset, i, output, j)\n{\n  var index = input.getUint16(offset + (i * 2), true) + mapOffset; // uhhhhh\n  output[j * 4 + 0] = map[index * 4 + 0]; // blue\n  output[j * 4 + 1] = map[index * 4 + 1]; // green\n  output[j * 4 + 2] = map[index * 4 + 2]; // red\n  output[j * 4 + 3] = map[index * 4 + 3]; // alpha\n};\n\nTGA.readRLEImage = function(tga)\n{\n  console.log(tga.dataview, tga.header);\n  throw 'NYI';\n};\n\nTGA.readColormappedImage = function(tga)\n{\n  var dataview = tga.dataview,\n    header = tga.header,\n    colorMap = tga.colorMap,\n    width = header.imageSpec.width,\n    height = header.imageSpec.height,\n    pixels = new Uint8ClampedArray(width * height * 4),\n    pixelDepth = header.imageSpec.pixelDepth,\n    offset = HEADER_SIZE + header.idLength +\n      (header.colorMapSpec.length * header.colorMapSpec.entrySizeBytes),\n    mapOffset = header.colorMapSpec.firstEntry,\n    read = null,\n    vScanDir = (header.imageSpec.origin & IMAGE_ORIGIN_VERTICAL_MASK) === IMAGE_ORIGIN_TOP ? 1 : -1,\n    hScanDir = (header.imageSpec.origin & IMAGE_ORIGIN_HORIZONTAL_MASK) === IMAGE_ORIGIN_RIGHT ? -1 : 1;\n\n  if(!colorMap)\n  {\n    throw 'Image is described as color-mapped, but has no map';\n  }\n\n  switch(pixelDepth) {\n    case 8:\n      read = TGA.readMappedPixel8;\n      break;\n    case 16:\n      read = TGA.readMappedPixel15;\n      break;\n    case 15:\n      read = TGA.readMappedPixel16;\n      break;\n    case 24:\n      read = TGA.readMappedPixel24;\n      break;\n    case 32:\n      read = TGA.readMappedPixel32;\n      break;\n    default:\n      throw 'Unsupported pixel depth';\n  }\n\n  var vStart, vEnd, hStart, hEnd;\n  if(vScanDir > 0)\n  {\n    vStart = 0;\n    vEnd = height;\n  }\n  else\n  {\n    vStart = height - 1;\n    vEnd = -1;\n  }\n\n  if(hScanDir > 0)\n  {\n    hStart = 0;\n    hEnd = width;\n  }\n  else\n  {\n    hStart = width - 1;\n    hEnd = -1;\n  }\n\n  // output is always top->bottom, left->right, so:\n  var row = 0, col;\n  for(var i = vStart; i != vEnd; i += vScanDir)\n  {\n    col = 0;\n    for(var j = hStart; j != hEnd; j += hScanDir)\n    {\n      read(dataview, colorMap, mapOffset, offset, i * width + j, pixels, row * width + col++);\n    }\n    row++;\n  }\n\n  return pixels;\n};\n\nTGA.readTruecolorImage = function(tga)\n{\n  var header = tga.header,\n    dataview = tga.dataview,\n    width = header.imageSpec.width,\n    height = header.imageSpec.height,\n    pixels = new Uint8ClampedArray(width * height * 4),\n    pixelDepth = header.imageSpec.pixelDepth,\n    offset = HEADER_SIZE + header.idLength +\n      (header.colorMapSpec.length * header.colorMapSpec.entrySizeBytes),\n    read = null,\n    vScanDir = (header.imageSpec.origin & IMAGE_ORIGIN_VERTICAL_MASK) === IMAGE_ORIGIN_TOP ? 1 : -1,\n    hScanDir = (header.imageSpec.origin & IMAGE_ORIGIN_HORIZONTAL_MASK) === IMAGE_ORIGIN_RIGHT ? -1 : 1;\n\n  switch(pixelDepth) {\n    case 8:\n      read = TGA.readPixel8;\n      break;\n    case 16:\n      read = TGA.readPixel15;\n      break;\n    case 15:\n      read = TGA.readPixel16;\n      break;\n    case 24:\n      read = TGA.readPixel24;\n      break;\n    case 32:\n      read = TGA.readPixel32;\n      break;\n    default:\n      throw 'Unsupported pixel depth';\n  }\n  var vStart, vEnd, hStart, hEnd;\n  if(vScanDir > 0)\n  {\n    vStart = 0;\n    vEnd = height;\n  }\n  else\n  {\n    vStart = height - 1;\n    vEnd = -1;\n  }\n\n  if(hScanDir > 0)\n  {\n    hStart = 0;\n    hEnd = width;\n  }\n  else\n  {\n    hStart = width - 1;\n    hEnd = -1;\n  }\n\n  // output is always top->bottom, left->right, so:\n  var row = 0, col;\n  for(var i = vStart; i != vEnd; i += vScanDir)\n  {\n    col = 0;\n    for(var j = hStart; j != hEnd; j += hScanDir)\n    {\n      read(dataview, offset, i * width + j, pixels, row * width + col++);\n    }\n    row++;\n  }\n\n  return pixels;\n};\n\nTGA.readImage = function(tga)\n{\n  if(tga.header.compressed)\n  {\n    return TGA.readRLEImage(tga);\n  }\n  else\n  {\n    if(tga.header.mapType === 0) // not color mapped:\n    {\n      return TGA.readTruecolorImage(tga);\n    }\n    else if(tga.header.mapType === 1) // color mapped\n    {\n      return TGA.readColormappedImage(tga);\n    }\n    else\n    {\n      throw 'Unsupported map type';\n    }\n  }\n};\n\n// Base function.\nvar libtga = {\n  readFile: function(arraybuf) {\n    return new TGA(arraybuf);\n  },\n  loadFile: function(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = function() {\n      callback(null, new TGA(this.response));\n    };\n    xhr.onerror = function(e) {\n      callback(e, null);\n    };\n\n    xhr.send();\n  },\n  TGA: TGA\n};\n\n\n// Version.\nlibtga.VERSION = '0.2.2';\n\n\n// Export to the root, which is probably `window`.\nroot.libtga = libtga;\n","}(this));\n"]}