{"version":3,"sources":["../src/_intro.js","../src/main.js","../src/_outro.js"],"names":[],"mappings":"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","file":"libtga.js","sourcesContent":["(function(root, undefined) {\n\n  \"use strict\";\n","/* libtga main */\n\nvar XMLHttpRequest = root.XMLHttpRequest || null;\n\n// constants and such:\nvar HEADER_SIZE = 18,\n\n  // image types: is bitfield-ish\n  IMAGE_TYPE_NONE = 0|0,\n  IMAGE_TYPE_COLORMAPPED = 1|0,\n  IMAGE_TYPE_TRUECOLOR = 2|0,\n  IMAGE_TYPE_GREYSCALE = 3|0,\n\n  // compression flag:\n  IMAGE_RUNLENGTH_ENCODED = 0x8|0,\n\n  // color maps (documented on wikipedia, but not in the spec?):\n  /*COLOR_MAP_NONE = 0|0,\n  COLOR_MAP_EXISTS = 1|0,\n  COLOR_MAP_TRUEVISION_START = 2|0,\n  COLOR_MAP_TRUEVISION_END = 127|0,\n  COLOR_MAP_DEV_START = 128|0,\n  COLOR_MAP_DEV_END = 255|0,*/\n\n  // image descriptor constants:\n  IMAGE_DESCRIPTOR_ATTRIBUTE_MASK = 0x7,\n  IMAGE_DESCRIPTOR_ORIGIN_UPPER = 0x20,\n  IMAGE_DESCRIPTOR_INTERLEAVE_MASK = 0xc0;\n\nvar TGA = function(arraybuf)\n{\n  this.dataview = new DataView(arraybuf);\n  this.header = TGA.readHeader(this.dataview);\n  this.width = this.header.imageSpec.width;\n  this.height = this.header.imageSpec.height;\n  this.compressed = !!(this.header.imageType & IMAGE_RUNLENGTH_ENCODED);\n  this.imageId = TGA.readImageId(this.dataview, this.header);\n  this.colorMap = TGA.readColorMap(this.dataview, this.header);\n  this.imageData = TGA.readImage(this.dataview, this.header);\n};\n\n// add constant refs here:\nTGA.HEADER_SIZE = HEADER_SIZE;\nTGA.IMAGE_TYPE_NONE = IMAGE_TYPE_NONE;\nTGA.IMAGE_TYPE_COLORMAPPED = IMAGE_TYPE_COLORMAPPED;\nTGA.IMAGE_TYPE_TRUECOLOR = IMAGE_TYPE_TRUECOLOR;\nTGA.IMAGE_TYPE_GREYSCALE = IMAGE_TYPE_GREYSCALE;\nTGA.IMAGE_RUNLENGTH_ENCODED = IMAGE_RUNLENGTH_ENCODED;\n\n// Utility functions don't really need to be in the prototype?\n// Utility functions:\nTGA.readHeader = function(dataview)\n{\n  var header = {\n    idLength: dataview.getUint8(0, true),\n    mapType: dataview.getUint8(1, true),\n    imageType: dataview.getUint8(2, true),\n    colorMapSpec: TGA.readColorMapSpec(dataview, 3),\n    imageSpec: TGA.readImageSpec(dataview, 8)\n  };\n  return header;\n};\n\nTGA.readColorMapSpec = function(dataview, offset)\n{\n  var colorMapSpec = {\n    firstEntry: dataview.getUint16(offset, true),\n    colorMapLength: dataview.getUint16(offset+2, true),\n    colorMapEntrySize: dataview.getUint8(offset+4, true)\n  };\n  return colorMapSpec;\n};\n\nTGA.readImageSpec = function(dataview, offset)\n{\n  var descriptor = dataview.getUint8(offset+9);\n  var imageSpec = {\n    xOrigin: dataview.getUint16(offset, true),\n    yOrigin: dataview.getUint16(offset+2, true),\n    width: dataview.getUint16(offset+4, true),\n    height: dataview.getUint16(offset+6, true),\n    pixelDepth: dataview.getUint8(offset+8),\n    descriptor: descriptor,\n    attributeBits: descriptor & IMAGE_DESCRIPTOR_ATTRIBUTE_MASK,\n    originUpper: (descriptor & IMAGE_DESCRIPTOR_ORIGIN_UPPER) == IMAGE_DESCRIPTOR_ORIGIN_UPPER,\n    interleave: (descriptor & IMAGE_DESCRIPTOR_INTERLEAVE_MASK) >> 6\n  };\n  return imageSpec;\n};\n\nTGA.readImageId = function(dataview, header)\n{\n  return new Uint8Array(dataview.buffer, HEADER_SIZE, header.idLength);\n};\n\nTGA.readColorMap = function(dataview, header)\n{\n  // stub:\n  return new Uint8Array(\n    dataview.buffer,\n    HEADER_SIZE + header.idLength,\n    header.colorMapSpec.colorMapLength * header.colorMapSpec.colorMapEntrySize);\n};\n\nTGA.readPixel15 = function(dataview, offset, i, pixels)\n{\n  var chunk = dataview.getUint16(offset + (i * 2), true);\n  pixels[i * 4 + 2] = chunk & 0x1f; // blue\n  pixels[i * 4 + 1] = (chunk >> 5) & 0x1f; // green\n  pixels[i * 4 + 0] = (chunk >> 10) & 0x1f; // red\n  pixels[i * 4 + 3] = 255; // alpha\n};\n\nTGA.readPixel16 = function(dataview, offset, i, pixels)\n{\n  var chunk = dataview.getUint16(offset + (i * 2), true);\n  pixels[i * 4 + 2] = chunk & 0x1f; // blue\n  pixels[i * 4 + 1] = (chunk >> 5) & 0x1f; // green\n  pixels[i * 4 + 0] = (chunk >> 10) & 0x1f; // red\n  pixels[i * 4 + 3] = (chunk & 0x80) == 0x80 ? 255 : 0; // alpha\n};\n\nTGA.readPixel24 = function(dataview, offset, i, pixels)\n{\n  pixels[i * 4 + 2] = dataview.getUint8(offset + (i * 3) + 0); //blue\n  pixels[i * 4 + 1] = dataview.getUint8(offset + (i * 3) + 1); //green\n  pixels[i * 4 + 0] = dataview.getUint8(offset + (i * 3) + 2); //red\n  pixels[i * 4 + 3] = 255;\n};\n\nTGA.readPixel32 = function(dataview, offset, i, pixels)\n{\n  pixels[i * 4 + 2] = dataview.getUint8(offset + (i * 4) + 0); //blue\n  pixels[i * 4 + 1] = dataview.getUint8(offset + (i * 4) + 1); //green\n  pixels[i * 4 + 0] = dataview.getUint8(offset + (i * 4) + 2); //red\n  pixels[i * 4 + 3] = dataview.getUint8(offset + (i * 4) + 3); // alpha\n};\n\nTGA.readImage = function(dataview, header)\n{\n  // I'm thinking I should store pixel data as Uint8Array,\n  // 4 elements per pixel... i.e. full-blown 32-bit color, regardless\n  // for tgas without attributes (alpha?), default alpha to 255?\n  var width = header.imageSpec.width,\n    height = header.imageSpec.height,\n    pixels = new Uint8ClampedArray(width * height * 4),\n    pixelDepth = header.imageSpec.pixelDepth,\n    offset = HEADER_SIZE + header.idLength +\n      (header.colorMapSpec.colorMapLength * header.colorMapSpec.colorMapEntrySize),\n    read = null;\n\n  switch(pixelDepth) {\n      case 16:\n        read = TGA.readPixel15;\n        break;\n      case 15:\n        read = TGA.readPixel16;\n        break;\n      case 24:\n        read = TGA.readPixel24;\n        break;\n      case 32:\n        read = TGA.readPixel32;\n        break;\n      default:\n        throw 'Unsupported pixel depth';\n    }\n\n  for(var i = 0; i < width * height; i++)\n  {\n    read(dataview, offset, i, pixels);\n  }\n\n  return pixels;\n};\n\n// Base function.\nvar libtga = {\n  readFile: function(arraybuf) {\n    return new TGA(arraybuf);\n  },\n  loadFile: function(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = function() {\n      callback(null, new TGA(this.response));\n    };\n    xhr.onerror = function(e) {\n      callback(e, null);\n    };\n\n    xhr.send();\n  },\n  TGA: TGA\n};\n\n\n// Version.\nlibtga.VERSION = '0.1.0';\n\n\n// Export to the root, which is probably `window`.\nroot.libtga = libtga;","}(this));\n"]}